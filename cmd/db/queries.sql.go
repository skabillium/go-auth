// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, profile_picture, password_hash, email_verification_token,
refresh_token, refresh_token_expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, email, profile_picture, email_verified, email_verification_token, reset_password_token, reset_password_expires_at, password_hash, refresh_token, refresh_token_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	ID                     pgtype.UUID
	Email                  string
	ProfilePicture         pgtype.Text
	PasswordHash           string
	EmailVerificationToken pgtype.Text
	RefreshToken           pgtype.Text
	RefreshTokenExpiresAt  pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.ProfilePicture,
		arg.PasswordHash,
		arg.EmailVerificationToken,
		arg.RefreshToken,
		arg.RefreshTokenExpiresAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ProfilePicture,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpiresAt,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, profile_picture, email_verified, email_verification_token, reset_password_token, reset_password_expires_at, password_hash, refresh_token, refresh_token_expires_at, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ProfilePicture,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpiresAt,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, profile_picture, email_verified, email_verification_token, reset_password_token, reset_password_expires_at, password_hash, refresh_token, refresh_token_expires_at, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ProfilePicture,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpiresAt,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByRefreshToken = `-- name: GetUserByRefreshToken :one
SELECT id, email, profile_picture, email_verified, email_verification_token, reset_password_token, reset_password_expires_at, password_hash, refresh_token, refresh_token_expires_at, created_at, updated_at FROM users WHERE refresh_token = $1
`

func (q *Queries) GetUserByRefreshToken(ctx context.Context, refreshToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByRefreshToken, refreshToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ProfilePicture,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpiresAt,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT id, email, profile_picture, email_verified, email_verification_token, reset_password_token, reset_password_expires_at, password_hash, refresh_token, refresh_token_expires_at, created_at, updated_at FROM users WHERE email_verification_token = $1
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, emailVerificationToken pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByVerificationToken, emailVerificationToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.ProfilePicture,
		&i.EmailVerified,
		&i.EmailVerificationToken,
		&i.ResetPasswordToken,
		&i.ResetPasswordExpiresAt,
		&i.PasswordHash,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPasswordResetInfo = `-- name: GetUserPasswordResetInfo :one
SELECT id, reset_password_expires_at FROM users WHERE reset_password_token = $1
`

type GetUserPasswordResetInfoRow struct {
	ID                     pgtype.UUID
	ResetPasswordExpiresAt pgtype.Timestamp
}

func (q *Queries) GetUserPasswordResetInfo(ctx context.Context, resetPasswordToken pgtype.Text) (GetUserPasswordResetInfoRow, error) {
	row := q.db.QueryRow(ctx, getUserPasswordResetInfo, resetPasswordToken)
	var i GetUserPasswordResetInfoRow
	err := row.Scan(&i.ID, &i.ResetPasswordExpiresAt)
	return i, err
}

const removeUserRefreshTokenById = `-- name: RemoveUserRefreshTokenById :exec
UPDATE users SET refresh_token = NULL, refresh_token_expires_at = NULL WHERE 
id = $1
`

func (q *Queries) RemoveUserRefreshTokenById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeUserRefreshTokenById, id)
	return err
}

const updateUserPasswordById = `-- name: UpdateUserPasswordById :exec
UPDATE users SET password_hash = $2 WHERE id = $1
`

type UpdateUserPasswordByIdParams struct {
	ID           pgtype.UUID
	PasswordHash string
}

func (q *Queries) UpdateUserPasswordById(ctx context.Context, arg UpdateUserPasswordByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserPasswordById, arg.ID, arg.PasswordHash)
	return err
}

const updateUserPasswordResetInfoById = `-- name: UpdateUserPasswordResetInfoById :exec
UPDATE users SET reset_password_token = $2, reset_password_expires_at = 
COALESCE(reset_password_expires_at, CURRENT_TIMESTAMP) + INTERVAL '15 minutes' WHERE
id = $1
`

type UpdateUserPasswordResetInfoByIdParams struct {
	ID                 pgtype.UUID
	ResetPasswordToken pgtype.Text
}

func (q *Queries) UpdateUserPasswordResetInfoById(ctx context.Context, arg UpdateUserPasswordResetInfoByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserPasswordResetInfoById, arg.ID, arg.ResetPasswordToken)
	return err
}

const updateUserProfilePictureById = `-- name: UpdateUserProfilePictureById :exec
UPDATE users SET profile_picture = $2 WHERE id = $1
`

type UpdateUserProfilePictureByIdParams struct {
	ID             pgtype.UUID
	ProfilePicture pgtype.Text
}

func (q *Queries) UpdateUserProfilePictureById(ctx context.Context, arg UpdateUserProfilePictureByIdParams) error {
	_, err := q.db.Exec(ctx, updateUserProfilePictureById, arg.ID, arg.ProfilePicture)
	return err
}

const verifyUserById = `-- name: VerifyUserById :exec
UPDATE users SET email_verified='t' WHERE id = $1
`

func (q *Queries) VerifyUserById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, verifyUserById, id)
	return err
}
